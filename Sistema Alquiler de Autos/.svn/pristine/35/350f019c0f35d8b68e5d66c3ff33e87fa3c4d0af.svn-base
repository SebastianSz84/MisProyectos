package controlador;

import java.util.Calendar;
import java.util.Date;
import java.util.Vector;

import modelo.Alquiler;
import modelo.AlquilerDTO;
import modelo.Automovil;
import modelo.AutomovilDTO;
import modelo.Cliente;
import modelo.ClienteDTO;
import modelo.Factura;
import modelo.FacturaDTO;
import modelo.Modelo;
import modelo.ModeloDTO;
import modelo.Reserva;
import modelo.ReservaDTO;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sistema de Alquiler de Autos
//  @ File Name : SistemaAlquilerAutos.java
//  @ Date : 09/05/2013
//  @ Author : Grupo 5
//
//

public class SistemaAlquilerAutos {
	private Vector<Cliente> clientes;
	private Vector<Reserva> reservas;
	private Vector<Alquiler> alquileres;
	private Vector<Modelo> modelos;
	private Vector<Factura> facturas;

	public SistemaAlquilerAutos() {
		clientes = new Vector<Cliente>(100, 50);
		reservas = new Vector<Reserva>(100, 50);
		alquileres = new Vector<Alquiler>(100, 50);
		modelos = new Vector<Modelo>(100, 50);
		facturas = new Vector<Factura>(100, 50);
	}

	public ClienteDTO registrarCliente(int dni, String nombre, String apellido,
			Date fechaNac, String domicilio, String sex, String nacionalidad,
			String tel, String usr, String pass) {

		if (buscarCliente(dni) == null && buscarUsuario(usr) == null) {
			Cliente c = new Cliente(dni, nombre, apellido, fechaNac, domicilio,
					sex, nacionalidad, tel, usr, pass);
			clientes.add(c);

			return c.crearClienteDTO();
		}
		return null;
	}

	private Cliente buscarCliente(int dni) {
		Cliente cli = null;

		for (int i = 0; i < clientes.size(); i++) {
			if (clientes.elementAt(i).getDni() == dni)
				cli = clientes.elementAt(i);
		}

		return cli;
	}

	public ClienteDTO mostrarCliente(int dni) {
		Cliente c = buscarCliente(dni);

		if (c != null) {
			return c.crearClienteDTO();
		}
		return null;
	}

	public void modificacionCliente(int dni, String nombre, String ape,
			Date fechaNacimiento, String domicilio, String sex,
			String nacionalidad, String pass, String tel) {

		Cliente c = buscarCliente(dni);

		if (c != null) {
			c.modificarDatos(nombre, ape, fechaNacimiento, domicilio, sex, nacionalidad, pass, tel);
		}
	}

	public boolean eliminarCliente(int dni) {
		Cliente cli = buscarCliente(dni);
		if (cli != null) {
			if (buscarReservaxCliente(dni) == null
					&& buscarAlquilerxCliente(dni) == null) {
				cli.setActivo(false);
				return true;
			}
		}
		return false;
	}

	public ModeloDTO registrarModelo(String codigoModelo, String marca,
			String modelo, String datosMotor, String datosSeguridad,
			String tipo, float costoDiario, float costoExcedente) {
		Modelo m = buscarModelo(codigoModelo);

		if (m == null) {
			m = new Modelo(codigoModelo, marca, modelo, datosMotor,
					datosSeguridad, tipo, costoDiario, costoExcedente);
			m.setActivo(true);
			modelos.add(m);
			ModeloDTO mod = m.crearModeloDTO();
			return mod;
		}
		return null;
	}

	private Modelo buscarModelo(String codigoModelo) {
		for (int i = 0; i < modelos.size(); i++) {
			if (modelos.elementAt(i).getCodigoModelo().equals(codigoModelo))
				return modelos.elementAt(i);
		}
		return null;
	}

	public boolean eliminarModelo(String codigoModelo) {
		Modelo m = buscarModelo(codigoModelo);

		if (m != null && m.hayAutoOcupado()) {
			m.setActivo(false);
			return true;
		}
		return false;
	}

	public AutomovilDTO registrarAutomovil(String codigoModelo, String anio,
			String patente, float kilometraje, float combustible, String estado) {
		Modelo m = buscarModelo(codigoModelo);

		if (m != null && m.buscarAutoxPatente(patente) == null) {
			Automovil auto = m.agregarAutomovil(anio, patente, kilometraje,
					combustible, estado);
			AutomovilDTO autoDTO = auto.crearAutomovilDTO();
			return autoDTO;
		}
		return null;
	}

	public ReservaDTO generarReserva(int dni, String tipo, Date fechaInicio,
			Date fechaFin) {
		Cliente c = buscarCliente(dni);

		if (c != null) {
			for (int i = 0; i < modelos.size(); i++) {
				if (modelos.elementAt(i).getTipo().equals(tipo)
						&& modelos.elementAt(i).hayDisponible(fechaInicio,
								fechaFin) != null) {
					Reserva res = new Reserva(fechaInicio, fechaFin,
							modelos.elementAt(i), c);
					res.setEstado("Activo");
					reservas.add(res);
					return res.crearReservaDTO();
				}
			}
		}
		return null;
	}

	public FacturaDTO cancelarReserva(int nroReserva) {
		Date hoy = new Date();
		Reserva res = buscarReserva(nroReserva);
		if (res != null && res.getEstado().equals("Activo")) {
			res.getModelo().deshacerReserva(res.getFechaInicio(),
					res.getFechaFin()); // saco un reservado y lo pongo
										// disponible
			res.setEstado("Cancelado el dia: " + hoy.toString());

			return generarFacturaMulta(res, "B");
		}
		return null;
	}

	private FacturaDTO generarFacturaMulta(Reserva res, String tipo) {
		Date hoy = new Date();
		Factura fact = new Factura(res.getNroReserva(), tipo, res.getCliente());

		Calendar lapzoMulta = Calendar.getInstance();
		lapzoMulta.setTime(hoy);
		lapzoMulta.add(Calendar.DAY_OF_MONTH, 2);

		fact.agregarItem("Multa por cancelación", res.getModelo()
				.getCostoDiario());
		if (lapzoMulta.getTime().before(res.getFechaInicio())) {
			fact.agregarItem("Bonificación", res.getModelo().getCostoDiario()
					* -1);
		}

		fact.calcularFactura();
		facturas.add(fact);
		return fact.crearFacturaDTO();
	}

	private Reserva buscarReserva(int nroReserva) {

		for (int i = 0; i < reservas.size(); i++) {
			if (reservas.elementAt(i).getNroReserva() == nroReserva)
				return reservas.elementAt(i);
		}
		return null;
	}

	private Reserva buscarReservaxCliente(int dni) {
		for (int i = 0; i < reservas.size(); i++) {
			if (reservas.elementAt(i).getCliente().getDni() == dni
					&& reservas.elementAt(i).getEstado().equals("Activo"))
				return reservas.elementAt(i);
		}
		return null;
	}

	public AlquilerDTO generarAlquilerPorReserva(int nroReserva, String obsCli) {
		Reserva res = buscarReserva(nroReserva);

		if (res != null) {
			Alquiler alq = new Alquiler(res.getFechaInicio(),
					res.getFechaFin(), res.getModelo(), res.getCliente());
			Automovil auto = res.getModelo().entregarReservado(
					res.getFechaInicio(), res.getFechaFin());
			if (auto != null) {
				alq.setAutomovil(auto);
				alq.setObservacionesCliente(obsCli);
				alquileres.add(alq);
				res.setEstado("Alquilado");
				return alq.crearAlquilerDTO();
			}
		}
		return null;
	}

	public AlquilerDTO generarAlquilerEnLocal(int dni, Date fechaInicio,
			Date fechaFin, String tipo, String obsCli) {
		Cliente c = buscarCliente(dni);

		if (c != null) {
			for (int i = 0; i < modelos.size(); i++) {
				if (modelos.elementAt(i).getTipo().equals(tipo)) {
					Automovil auto = modelos.elementAt(i).hayDisponible(
							fechaInicio, fechaFin);
					if (auto != null) {
						Alquiler alq = new Alquiler(fechaInicio, fechaFin,
								modelos.elementAt(i), c);
						alq.setAutomovil(auto);
						alq.setObservacionesCliente(obsCli);
						alquileres.add(alq);
						return alq.crearAlquilerDTO();
					}
				}
			}
		}
		return null;
	}

	private Alquiler buscarAlquiler(int nroAlquiler) {
		for (int i = 0; i < alquileres.size(); i++) {
			if (alquileres.elementAt(i).getNroAlquiler() == nroAlquiler)
				return alquileres.elementAt(i);
		}
		return null;
	}

	private Alquiler buscarAlquilerxCliente(int dni) {
		for (int i = 0; i < alquileres.size(); i++) {
			if (alquileres.elementAt(i).getCliente().getDni() == dni
					&& alquileres.elementAt(i).getFechaDevolucion().toString()
							.isEmpty())
				return alquileres.elementAt(i);
		}
		return null;
	}

	public AlquilerDTO registrarDevolucion(int nroAlquiler,
			Date fechaDevolucion, String observ, float kilometraje,
			float combustible, float descuento, float recargo) {
		Alquiler alq = buscarAlquiler(nroAlquiler);

		if (alq != null) {
			alq.finalizarAlquiler(fechaDevolucion, observ, kilometraje,
					combustible, descuento, recargo);
			return alq.crearAlquilerDTO();
		}
		return null;
	}

	public ClienteDTO iniciarSesion(String user, String pass) {
		Cliente c = buscarUsuario(user);
		if (c != null) {
			if (c.getPassword().equals(pass)) {
				return c.crearClienteDTO();
			}
		}
		return null;
	}

	private Cliente buscarUsuario(String user) {
		for (int i = 0; i < clientes.size(); i++) {
			if (clientes.elementAt(i).getUsername() != null
					&& clientes.elementAt(i).getUsername().equals(user)) {
				return clientes.elementAt(i);
			}
		}
		return null;
	}

	public ReservaDTO mostrarReserva(int nroReserva) {
		Reserva res = buscarReserva(nroReserva);
		if (res != null) {
			return res.crearReservaDTO();
		}
		return null;
	}

	public FacturaDTO generarFactura(int nroAlquiler, String tipo) {
		Alquiler alq = buscarAlquiler(nroAlquiler);

		if (alq != null) {
			Factura fact = new Factura(alq.getNroAlquiler(), tipo,
					alq.getCliente());
			if (alq.getRecargo() > 0) {
				fact.agregarItem(alq.getObservacionesDevolucion(),
						alq.getRecargo());
			}
			if (alq.getDescuento() > 0) {
				fact.agregarItem("Descuentos", alq.getDescuento());
			}
			fact.agregarItem(
					"Costo por alquiler",
					alq.getModelo().calcularCosto(alq.getFechaInicio(),
							alq.getFechaFin(), alq.getFechaDevolucion()));
			fact.calcularFactura();
			facturas.add(fact);
			return fact.crearFacturaDTO();
		}
		return null;
	}

	public ModeloDTO mostrarModelo(String codigoModelo) {
		Modelo mod = buscarModelo(codigoModelo);

		if (mod != null) {
			return mod.crearModeloDTO();
		}
		return null;
	}

	public void modificarModelo(String codigoModelo, String marca,
			String modelo, String datosMotor, String datosSeguridad,
			String tipo, float costoDiario, float costoExcedente) {
		Modelo m = buscarModelo(codigoModelo);
		if (m != null) {
			m.setMarca(marca);
			m.setModelo(modelo);
			m.setDatosMotor(datosMotor);
			m.setDatosSeguridad(datosSeguridad);
			m.setTipo(tipo);
			m.setCostoDiario(costoDiario);
			m.setCostoExcedente(costoExcedente);
		}
	}

	public AutomovilDTO mostrarAutomovil(String patente) {
		for (int i = 0; i < modelos.size(); i++) {
			Automovil auto = modelos.elementAt(i).buscarAutoxPatente(patente);
			if (auto != null) {
				return auto.crearAutomovilDTO();
			}
		}
		return null;
	}

	public boolean eliminarAutomovil(String patente) {
		for (int i = 0; i < modelos.size(); i++) {
			if (modelos.elementAt(i).eliminarAutoxPatente(patente)) {
				return true;
			}
		}
		return false;
	}

	public AlquilerDTO mostrarAlquiler(int nroAlquiler) {
		Alquiler alq = buscarAlquiler(nroAlquiler);

		if (alq != null) {
			return alq.crearAlquilerDTO();
		}
		return null;
	}

	public FacturaDTO mostrarFactura(int nroFactura) {
		Factura fact = buscarFactura(nroFactura);

		if (fact != null) {
			return fact.crearFacturaDTO();
		}
		return null;
	}

	private Factura buscarFactura(int nroFactura) {
		for (int i = 0; i < facturas.size(); i++) {
			if (facturas.elementAt(i).getNroFactura() == nroFactura) {
				return facturas.elementAt(i);
			}
		}
		return null;
	}

	public AutomovilDTO modificarAutomovil(String patente, String anio,
			float comb, float kilom, boolean activo) {
		for (int i = 0; i < modelos.size(); i++) {
			AutomovilDTO autoDTO = modelos.elementAt(i).modificarAuto(patente,
					anio, comb, kilom, activo);
			if (autoDTO != null) {
				return autoDTO;
			}
		}
		return null;
	}
}